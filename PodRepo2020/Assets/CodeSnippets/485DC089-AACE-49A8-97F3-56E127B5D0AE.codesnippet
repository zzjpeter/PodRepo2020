<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>UICollectionView_FlowLayout</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>- ( UICollectionViewFlowLayout *)getFlowLayout{
    //1.初始化layout UICollectionViewFlowLayout流水布局
    UICollectionViewFlowLayout *flowLayout  = [[UICollectionViewFlowLayout alloc] init];
    //通过UICollectionViewFlowLayout对象进行布局( 如果布局的尺寸是固定的，例如：item的尺寸大小都是固定，可以使用全局属性，即设置下文中layout )
    
    // 5.设置布局方向
    //设置collectionView滚动方向 默认值是竖直方向滚动 UICollectionViewScrollDirectionVertical(竖直方向滚动),UICollectionViewScrollDirectionHorizontal（水平方向滚动）
    flowLayout.scrollDirection = UICollectionViewScrollDirectionVertical;
    // 1.设置滚动方向上的间距
    flowLayout.minimumInteritemSpacing = 1;
    // 2.设置与滚动方向垂直的方向上的间距
    flowLayout.minimumLineSpacing = 1;
    // 3.设置每个item的大小 该方法也可以设置itemSize
    //flowLayout.itemSize = CGSizeMake(110, 150);
    // 4.设置Item的估计大小,用于动态设置item的大小，结合自动布局（self-sizing-cell）
    //flowLayout.estimatedItemSize = CGSizeMake(110, 150);
    // 6.设置头视图尺寸大小
    //设置Section的headerView的尺寸大小 （滚动方向为竖直方向时只有设置高度起作用(宽度默认为与collectionView一样) 同理，滚动方向为水平方向时只有设置宽度起作用(高度默认为与collectionView一样)）
    //flowLayout.headerReferenceSize = CGSizeMake(0.0, 100.0);
    // 7.设置尾视图尺寸大小
    //设置Section的footerView的尺寸大小
    //flowLayout.footerReferenceSize = CGSizeMake(0.0, 100.0);
    // 8.设置分区(组)的EdgeInset（四边距）
    flowLayout.sectionInset = UIEdgeInsetsMake(10, 20, 30, 40);
    // 9.10.设置分区的头视图和尾视图是否始终固定在屏幕上边和下边  类似tableView的效果
    flowLayout.sectionFootersPinToVisibleBounds = NO;//默认值为NO
    flowLayout.sectionHeadersPinToVisibleBounds = NO;//默认值为NO
    return flowLayout;
}

- (UICollectionView *)createCollectionView{
    
    UICollectionViewFlowLayout *flowLayout = [self getFlowLayout];
    
    //2.初始化collectionView
    UICollectionView *collectionView = [[UICollectionView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) collectionViewLayout:flowLayout];
    collectionView.backgroundColor = [UIColor clearColor];

    //3.设置代理
    collectionView.delegate = self;
    collectionView.dataSource = self;
    
    //4.设置是否允许 选中
    collectionView.allowsSelection = YES; // default is YES
    collectionView.allowsMultipleSelection = NO; // default is NO
    
    collectionView.showsHorizontalScrollIndicator = NO;// default YES
    collectionView.showsVerticalScrollIndicator = NO;// default YES
    
    return collectionView;
}

#pragma mark --UICollectionViewDataSource代理方法
 //返回section个数
 - (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return 3;
}
 
 //每个section的item个数
 - (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return 9;
}
 
 - (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    
    TestCollectionViewCell *cell = (TestCollectionViewCell *)[collectionView dequeueReusableCellWithReuseIdentifier:kCellID forIndexPath:indexPath];
    
    cell.botLabel.text = [NSString stringWithFormat:@"{%ld,%ld}",(long)indexPath.section,(long)indexPath.row];
    
    cell.backgroundColor = [UIColor yellowColor];
    
    return cell;
}

//通过设置SupplementaryViewOfKind 来设置头部或者底部的view，其中 ReuseIdentifier 的值必须和 注册是填写的一致，本例都为 “reusableView”
//这里设置 section 的头部和尾部
- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath
{
    if (kind == UICollectionElementKindSectionHeader) {
        UICollectionReusableView *headerView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:kHeaderReusableView forIndexPath:indexPath];
        headerView.backgroundColor =[UIColor grayColor];
        UILabel *label = [[UILabel alloc] initWithFrame:headerView.bounds];
        label.text = @"这是collectionView的section头部";
        label.font = [UIFont systemFontOfSize:20];
        [headerView addSubview:label];
        return headerView;
    }else if([kind isEqualToString:UICollectionElementKindSectionFooter]){
        UICollectionReusableView *footerView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:kFooterReusableView forIndexPath:indexPath];
        footerView.backgroundColor =[UIColor lightGrayColor];
        UILabel *label = [[UILabel alloc] initWithFrame:footerView.bounds];
        label.text = @"这是collectionView的section尾部";
        label.font = [UIFont systemFontOfSize:20];
        [footerView addSubview:label];
        return footerView;
    }
    
    return nil;
}
//是否允许移动Item
//- (BOOL)collectionView:(UICollectionView *)collectionView canMoveItemAtIndexPath:(NSIndexPath *)indexPath
//{
//    return YES;
//}
//
//移动Item时触发的方法
//- (void)collectionView:(UICollectionView *)collectionView moveItemAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath*)destinationIndexPath
//{
//
//}


#pragma mark --UICollectionViewDelegateFlowLayout代理方法
 //设置每个item的尺寸
 - (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    /* width = n * (itemWidth) + (n-1) * kminimumInteritemSpacing - left - right*/
    CGFloat width = self.collectionView.frame.size.width;
    return CGSizeMake((width + kminimumInteritemSpacing - 10 -10)/2.0 - kminimumInteritemSpacing, 130);
}

//设置section的headerView的尺寸大小 （滚动方向为竖直方向时只有设置高度起作用(宽度默认为与collectionView一样) 同理，滚动方向为水平方向时只有设置宽度起作用(高度默认为与collectionView一样)）
 //section的header的size
 - (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section
 {
     return CGSizeMake(0, 50.0);
 }

//section的footer的size
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout referenceSizeForFooterInSection:(NSInteger)section
{
    return CGSizeMake(0, 100.0);
}

 //设置每个section的UIEdgeInsets 内边距
 - (UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    return UIEdgeInsetsMake(10, 10, 10, 10);
}
//设置每个item滚动方向上的 最小间距
- (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section
{
    return 30;
}

 //设置每个item与滚动方向垂直方向上的 最小间距
 - (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section
{
    return 20;
}
 

#pragma mark --UICollectionViewDelegate代理方法
 //点击item方法
//已经选中某个item时触发的方法
 - (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    TestCollectionViewCell *cell = (TestCollectionViewCell *)[collectionView cellForItemAtIndexPath:indexPath];
    NSString *msg = cell.botLabel.text;
    NSLog(@"%@",msg);
}

////是否允许某个Item的高亮，返回NO，则不能进入高亮状态
//- (BOOL)collectionView:(UICollectionView *)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath *)indexPath; {
//    return YES;
//}
//
////当item高亮时触发的方法
//- (void)collectionView:(UICollectionView *)collectionView didHighlightItemAtIndexPath:(NSIndexPath *)indexPath; {
//    
//}
//
////结束高亮状态时触发的方法
//- (void)collectionView:(UICollectionView *)collectionView didUnhighlightItemAtIndexPath:(NSIndexPath *)indexPath; {
//    
//}
////是否可以选中某个Item，返回NO，则不能选中
//- (BOOL)collectionView:(UICollectionView *)collectionView shouldSelectItemAtIndexPath:(NSIndexPath *)indexPath; {
//    return YES;
//}
//
////是否可以取消选中某个Item
//- (BOOL)collectionView:(UICollectionView *)collectionView shouldDeselectItemAtIndexPath:(NSIndexPath *)indexPath; {
//    return YES;
//}
//
////将要加载某个Item时调用的方法
//- (void)collectionView:(UICollectionView *)collectionView willDisplayCell:(UICollectionViewCell *)cell forItemAtIndexPath:(NSIndexPath *)indexPath NS_AVAILABLE_IOS(8_0); {
//    
//}
//
////将要加载头尾视图时调用的方法
//- (void)collectionView:(UICollectionView *)collectionView willDisplaySupplementaryView:(UICollectionReusableView *)view forElementKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)indexPath NS_AVAILABLE_IOS(8_0); {
//    
//}
//
////已经展示某个Item时触发的方法
//- (void)collectionView:(UICollectionView *)collectionView didEndDisplayingCell:(UICollectionViewCell *)cell forItemAtIndexPath:(NSIndexPath *)indexPath; {
//    
//}
//
////已经展示某个头尾视图时触发的方法
//- (void)collectionView:(UICollectionView *)collectionView didEndDisplayingSupplementaryView:(UICollectionReusableView *)view forElementOfKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)indexPath; {
//    
//}
//
////这个方法设置是否展示长按菜单
//// 长按某item，弹出copy和paste的菜单
//- (BOOL)collectionView:(UICollectionView *)collectionView shouldShowMenuForItemAtIndexPath:(NSIndexPath *)indexPath; {
//    return YES;
//}
//
////这个方法用于设置要展示的菜单选项
////// 使copy和paste有效
//- (BOOL)collectionView:(UICollectionView *)collectionView canPerformAction:(SEL)action forItemAtIndexPath:(NSIndexPath *)indexPath withSender:(nullable id)sender; {
//    //    if ([NSStringFromSelector(action) isEqualToString:@"copy:"] || [NSStringFromSelector(action) isEqualToString:@"paste:"])
//    //    {
//    //        return YES;
//    //    }
//    //
//    //    return NO;
//    return YES;
//}
//
//
////这个方法用于实现点击菜单按钮后的触发方法,通过测试，只有copy，cut和paste三个方法可以使用
//- (void)collectionView:(UICollectionView *)collectionView performAction:(SEL)action forItemAtIndexPath:(NSIndexPath *)indexPath withSender:(nullable id)sender; {
//    //通过下面的方式可以将点击按钮的方法名打印出来：
//    NSLog(@"%@",NSStringFromSelector(action));//    if([NSStringFromSelector(action) isEqualToString:@"copy:"])
//    //    {
//    //        //        NSLog(@"-------------执行拷贝-------------");
//    //        [_collectionView performBatchUpdates:^{
//    //            [_section0Array removeObjectAtIndex:indexPath.row];
//    //            [_collectionView deleteItemsAtIndexPaths:@[indexPath]];
//    //        } completion:nil];
//    //    }
//    //    else if([NSStringFromSelector(action) isEqualToString:@"paste:"])
//    //    {
//    //        NSLog(@"-------------执行粘贴-------------");
//    //    }
//}
//
////collectionView进行重新布局时调用的方法
////- (nonnull UICollectionViewTransitionLayout *)collectionView:(UICollectionView *)collectionView transitionLayoutForOldLayout:(UICollectionViewLayout *)fromLayout newLayout:(UICollectionViewLayout *)toLayout; {
////
////}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>485DC089-AACE-49A8-97F3-56E127B5D0AE</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Generic</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>UICollectionView的FlowLayout基本布局详解</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
