<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>RunLoop</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>/*
 1. RunLoop简介
 1.1 什么是RunLoop？
    Run表示运行，Loop表示循环。结合在一起就是运行的循环的意思(直观理解就像是不停的跑圈。－z)
    RunLoop实际上是一个对象，这个对象在循环中用来处理程序运行过程中出现的各种事件（比如说触摸事件、UI刷新事件、定时器事件、Selector事件），从而保持程序的持续运行；而且在没有事件处理的时候，会进入睡眠模式，从而节省CPU资源，提高程序性能。
 1.2 RunLoop和线程(RunLoop让线程能够处理任务完成后并不退出，可以再执行任务 －z)
    RunLoop和线程是息息相关的，我们知道线程的作用是用来执行特定的一个或多个任务，但是在默认情况下，线程执行完之后就会退出，就不能再执行任务了。这时我们就需要采用一种方式来让线程能够处理任务，并不退出。所以，我们就有了RunLoop。
         一条线程对应一个RunLoop对象，每条线程都有唯一一个与之对应的RunLoop对象。
         我们只能在当前线程中操作当前线程的RunLoop，而不能去操作其他线程的RunLoop。
         RunLoop对象在第一次获取RunLoop时创建，销毁则是在线程结束的时候。
         主线程的RunLoop对象系统自动帮助我们创建好了(原理如下)，而子线程的RunLoop对象需要我们主动创建。
 1.3 默认情况下主线程的RunLoop原理
    我们在启动一个iOS程序的时候，系统会调用创建项目时自动生成的main.m的文件。其中UIApplicationMain函数内部帮我们开启了主线程的RunLoop，UIApplicationMain内部拥有一个无线循环的代码。上边的代码中开启RunLoop的过程可以简单的理解为如下代码：
     int main(int argc, char * argv[]) {
     BOOL running = YES;
     do {
     // 执行各种任务，处理各种事件
     // ......
     } while (running);
     
     return 0;
     }
    从上边可看出，程序一直在do-while循环中执行，所以UIApplicationMain函数一直没有返回，我们在运行程序之后程序不会马上退出，会保持持续运行状态。
    下图是苹果官方给出的RunLoop模型图。
    从上图中可以看出，RunLoop就是线程中的一个循环，RunLoop在循环中会不断检测，通过Input sources（输入源）和Timer sources（定时源）两种来源等待接受事件；然后对接受到的事件通知线程进行处理，并在没有事件的时候进行休息。
 
 2. RunLoop相关类
 下面我们来了解一下Core Foundation框架下关于RunLoop的5个类，只有弄懂这几个类的含义，我们才能深入了解RunLoop运行机制。
     CFRunLoopRef：代表RunLoop的对象
     CFRunLoopModeRef：RunLoop的运行模式
     CFRunLoopSourceRef：就是RunLoop模型图中提到的输入源/事件源
     CFRunLoopTimerRef：就是RunLoop模型图中提到的定时源
     CFRunLoopObserverRef：观察者，能够监听RunLoop的状态改变
    1.一个RunLoop对象（CFRunLoopRef）中包含若干个运行模式（CFRunLoopModeRef）。而每一个运行模式下又包含若干个输入源（CFRunLoopSourceRef）、定时源（CFRunLoopTimerRef）、观察者（CFRunLoopObserverRef）。
    2.每次RunLoop启动时，只能指定其中一个运行模式（CFRunLoopModeRef），这个运行模式（CFRunLoopModeRef）被称作CurrentMode。
    3.如果需要切换运行模式（CFRunLoopModeRef），只能退出Loop，再重新指定一个运行模式（CFRunLoopModeRef）进入。
    4.这样做主要是为了分隔开不同组的输入源（CFRunLoopSourceRef）、定时源（CFRunLoopTimerRef）、观察者（CFRunLoopObserverRef），让其互不影响 。
 2.1 CFRunLoopRef
     CFRunLoopRef就是Core Foundation框架下RunLoop对象类。我们可通过以下方式来获取RunLoop对象：
     
     Core Foundation
     CFRunLoopGetCurrent(); // 获得当前线程的RunLoop对象
     CFRunLoopGetMain(); // 获得主线程的RunLoop对象
     当然，在Foundation框架下获取RunLoop对象类的方法如下：
     
     Foundation
     [NSRunLoop currentRunLoop]; // 获得当前线程的RunLoop对象
     [NSRunLoop mainRunLoop]; // 获得主线程的RunLoop对象
 
 2.2 CFRunLoopModeRef
     系统默认定义了多种运行模式（CFRunLoopModeRef），如下：
     
     kCFRunLoopDefaultMode：App的默认运行模式，通常主线程是在这个运行模式下运行
     UITrackingRunLoopMode：跟踪用户交互事件（用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他Mode影响）
     UIInitializationRunLoopMode：在刚启动App时第进入的第一个 Mode，启动完成后就不再使用
     GSEventReceiveRunLoopMode：接受系统内部事件，通常用不到
     kCFRunLoopCommonModes：伪模式，不是一种真正的运行模式（后边会用到）
     其中kCFRunLoopDefaultMode、UITrackingRunLoopMode、kCFRunLoopCommonModes是我们开发中需要用到的模式，具体使用方法我们在 2.3 CFRunLoopTimerRef 中结合CFRunLoopTimerRef来演示说明。
 2.3 CFRunLoopTimerRef
 
     CFRunLoopTimerRef是定时源（RunLoop模型图中提到过），理解为基于时间的触发器，基本上就是NSTimer（哈哈，这个理解就简单了吧）。
     这是因为：
     
     当我们不做任何操作的时候，RunLoop处于NSDefaultRunLoopMode下。
     而当我们拖动Text View的时候，RunLoop就结束NSDefaultRunLoopMode，切换到了UITrackingRunLoopMode模式下，这个模式下没有添加NSTimer，所以我们的NSTimer就不工作了。
     但当我们松开鼠标的时候，RunLoop就结束UITrackingRunLoopMode模式，又切换回NSDefaultRunLoopMode模式，所以NSTimer就又开始正常工作了。
 
 2.4 CFRunLoopSourceRef
 
     CFRunLoopSourceRef是事件源（RunLoop模型图中提到过），CFRunLoopSourceRef有两种分类方法。
     
     第一种按照官方文档来分类（就像RunLoop模型图中那样）：
     Port-Based Sources（基于端口）
     Custom Input Sources（自定义）
     Cocoa Perform Selector Sources
     第二种按照函数调用栈来分类：
     Source0 ：非基于Port
     Source1：基于Port，通过内核和其他线程通信，接收、分发系统事件
     这两种分类方式其实没有区别，只不过第一种是通过官方理论来分类，第二种是在实际应用中通过调用函数来分类。
     下边我们举个例子大致来了解一下函数调用栈和Source。
     所以点击事件是这样来的：
     
     首先程序启动，调用16行的main函数，main函数调用15行UIApplicationMain函数，然后一直往上调用函数，最终调用到0行的BtnClick函数，即点击函数。
     
     同时我们可以看到11行中有Sources0，也就是说我们点击事件是属于Sources0函数的，点击事件就是在Sources0中处理的。
     
     而至于Sources1，则是用来接收、分发系统事件，然后再分发到Sources0中处理的。
 
     2.5 CFRunLoopObserverRef
     
     CFRunLoopObserverRef是观察者，用来监听RunLoop的状态改变
     
     CFRunLoopObserverRef可以监听的状态改变有以下几种：
     
     typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {
     kCFRunLoopEntry = (1UL &lt;&lt; 0),               // 即将进入Loop：1
     kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1),        // 即将处理Timer：2
     kCFRunLoopBeforeSources = (1UL &lt;&lt; 2),       // 即将处理Source：4
     kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5),       // 即将进入休眠：32
     kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6),        // 即将从休眠中唤醒：64
     kCFRunLoopExit = (1UL &lt;&lt; 7),                // 即将从Loop中退出：128
     kCFRunLoopAllActivities = 0x0FFFFFFFU       // 监听全部状态改变
     };
     下边我们通过代码来监听下RunLoop中的状态改变。
 
 //    [self showDemo1]; // 用来展示CFRunLoopModeRef和CFRunLoopTimerRef的结合使用
 //    [self showDemo2]; // 用来展示CFRunLoopObserverRef使用
 //    [self showDemo4]; // 用来展示常驻内存的方式
 */
#pragma mark -用来展示常驻内存的方式
/**
 * 第四个例子：用来展示常驻内存的方式
 */
- (void)showDemo4
{
    // 创建线程，并调用run1方法执行任务
    self.thread = [[NSThread alloc] initWithTarget:self selector:@selector(run1) object:nil];
    [self.thread start];
}

- (void) run1
{
    // 这里写任务
    NSLog(@"----run1-----%@",[NSThread currentThread]);
    
    [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];
    
    [[NSRunLoop currentRunLoop] run];
    
    // 测试是否开启了RunLoop，如果开启RunLoop，则来不了这里，因为RunLoop开启了循环。
    
    NSLog(@"-------------");
}

- (void) run2
{
    NSLog(@"----run2------");
    
}

- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event
{
//    [self showDemo3]; // 用来展示UIImageView的延迟显示
    
    // 利用performSelector调用常驻线程self.thread的run2方法
    [self performSelector:@selector(run2) onThread:self.thread withObject:nil waitUntilDone:NO]; // 用来展示常驻内存的方式
}

#pragma mark -用来展示UIImageView的延迟显示
/**
 * 第三个例子：用来展示UIImageView的延迟显示
 */
- (void)showDemo3
{
    [self.imageView performSelector:@selector(setImage:) withObject:[UIImage imageNamed:@"tupian"] afterDelay:4.0 inModes:@[NSDefaultRunLoopMode]];
}

- (IBAction)BtnClick:(id)sender {
    NSLog(@".....");
}

#pragma mark -用来展示CFRunLoopObserverRef使用
/**
 * 第二个例子：用来展示CFRunLoopObserverRef使用
 */
- (void)showDemo2
{
    // 创建观察者
    CFRunLoopObserverRef observer = CFRunLoopObserverCreateWithHandler(CFAllocatorGetDefault(), kCFRunLoopAllActivities, YES, 0, ^(CFRunLoopObserverRef observer, CFRunLoopActivity activity) {
        NSLog(@"监听到RunLoop发生改变---%zd",activity);
    });
    
    // 添加观察者到当前RunLoop中
    CFRunLoopAddObserver(CFRunLoopGetCurrent(), observer, kCFRunLoopDefaultMode);
    
    // 释放observer
    CFRelease(observer);
}
#pragma mark -用来展示CFRunLoopModeRef和CFRunLoopTimerRef的结合使用
/**
 * 第一个例子：用来展示CFRunLoopModeRef和CFRunLoopTimerRef的结合使用
 */
- (void)showDemo1
{
    // 定义一个定时器，约定两秒之后调用self的run方法
    NSTimer *timer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(run) userInfo:nil repeats:YES];
    
    // 将定时器添加到当前RunLoop的NSDefaultRunLoopMode下,一旦RunLoop进入其他模式，定时器timer就不工作了
    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];
    
//    // 将定时器添加到当前RunLoop的UITrackingRunLoopMode下，只在拖动情况下工作
//    [[NSRunLoop currentRunLoop] addTimer:timer forMode:UITrackingRunLoopMode];
//
//    // 将定时器添加到当前RunLoop的NSRunLoopCommonModes下，定时器就会跑在被标记为Common Modes的模式下
//    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];
    
    // 调用了scheduledTimer返回的定时器，已经自动被加入到了RunLoop的NSDefaultRunLoopMode模式下。
    [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(run) userInfo:nil repeats:YES];
}

- (void)run
{
    NSLog(@"---run");
    
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>FFA6F157-0542-4649-84DF-194EDB90DC99</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetTitle</key>
	<string>RunLoop详解</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
