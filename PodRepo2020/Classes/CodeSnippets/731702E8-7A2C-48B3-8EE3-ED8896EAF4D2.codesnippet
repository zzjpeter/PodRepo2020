<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>NSOperation_</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>/*
 1. NSOperation简介
    NSOperation需要配合NSOperationQueue来实现多线程。因为默认情况下，NSOperation单独使用时系统同步执行操作，并没有开辟新线程的能力，只有配合NSOperationQueue才能实现异步执行。
 创建任务：先将需要执行的操作封装到一个NSOperation对象中。
 创建队列：创建NSOperationQueue对象。
 将任务加入到队列中：然后将NSOperation对象添加到NSOperationQueue中。
 之后呢，系统就会自动将NSOperationQueue中的NSOperation取出来，在新线程中执行操作。

 2.NSOperation和NSOperationQueue的基本使用
 1. 创建任务
 NSOperation是个抽象类，并不能封装任务。我们只有使用它的子类来封装任务。我们有三种方式来封装任务。
    1.1使用子类NSInvocationOperation
    1.2使用子类NSBlockOperation
    1.3定义继承自NSOperation的子类，通过实现内部相应的方法来封装任务。
 2. 创建队列
 和GCD中的并发队列、串行队列略有不同的是：NSOperationQueue一共有两种队列：主队列、其他队列。其中其他队列同时包含了串行、并发功能。下边是主队列、其他队列的基本创建方法和特点。
 */
#pragma mark -1. 创建任务
#pragma mark -1.1 使用子类- NSInvocationOperation:
/*从中可以看到，在没有使用NSOperationQueue、单独使用NSInvocationOperation的情况下，NSInvocationOperation在主线程执行操作，并没有开启新线程。*/
- (void)test_NSInvocationOperation{
    // 1.创建NSInvocationOperation对象
    NSInvocationOperation *op = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(run) object:nil];
    // 2.调用start方法开始执行操作
    [op start];
}
- (void)run
{
    NSLog(@"------%@", [NSThread currentThread]);
}
#pragma mark -1.2 使用子类- NSBlockOperation
/*我们同样可以看到，在没有使用NSOperationQueue、单独使用NSBlockOperation的情况下，NSBlockOperation也是在主线程执行操作，并没有开启新线程。
 但是，NSBlockOperation还提供了一个方法addExecutionBlock:，通过addExecutionBlock:就可以为NSBlockOperation添加额外的操作，这些额外的操作就会在其他线程并发执行。
 可以看出，blockOperationWithBlock:方法中的操作是在主线程中执行的，而addExecutionBlock:方法中的操作是在其他线程中执行的。
*/
- (void)test_NSBlockOperation{
    NSBlockOperation *op = [NSBlockOperation blockOperationWithBlock:^{
        // 在主线程
        NSLog(@"------%@", [NSThread currentThread]);
    }];
    
    [op start];
}
- (void)blockOperation
{
    NSBlockOperation *op = [NSBlockOperation blockOperationWithBlock:^{
        // 在主线程
        NSLog(@"1------%@", [NSThread currentThread]);
    }];
    
    // 添加额外的任务(在子线程执行)
    [op addExecutionBlock:^{
        NSLog(@"2------%@", [NSThread currentThread]);
    }];
    [op addExecutionBlock:^{
        NSLog(@"3------%@", [NSThread currentThread]);
    }];
    [op addExecutionBlock:^{
        NSLog(@"4------%@", [NSThread currentThread]);
    }];
    
    [op start];
}
#pragma mark -1.3 定义继承自NSOperation的子类 [一般重写 - (void)main方法即可 实现需要执行的任务]
/*可以看出：在没有使用NSOperationQueue、单独使用自定义子类的情况下，是在主线程执行操作，并没有开启新线程。 */
- (void)test_Custom_NSOperation{
    // 创建Z_NSOperation
    Z_NSOperation *op1 = [[Z_NSOperation alloc] init];
    [op1 start];
}

#pragma mark -2. 创建队列
#pragma mark -2.1 主队列
- (void)test_MainQueue{
    //凡是添加到主队列中的任务（NSOperation），都会放到主线程中执行
    NSOperationQueue *queue = [NSOperationQueue mainQueue];
}
#pragma mark -2.2 其他队列（非主队列）
- (void)test_OperationQueue{
    /*添加到这种队列中的任务（NSOperation），就会自动放到子线程中执行
    同时包含了：串行、并发功能*/
    NSOperationQueue *queue = [[NSOperationQueue alloc] init];
}

#pragma mark -3. 将任务加入到队列中
//前边说了，NSOperation需要配合NSOperationQueue来实现多线程。那么我们需要将创建好的任务加入到队列中去。总共有两种方法
#pragma mark -3.1 需要先创建任务，再将创建好的任务加入到创建好的队列中去 - (void)addOperation:(NSOperation *)op;
//可以看出：NSInvocationOperation和NSOperationQueue结合后能够开启新线程，进行并发执行NSBlockOperation和NSOperationQueue也能够开启新线程，进行并发执行。
- (void)test_addOperationToQueue
{
    // 1.创建队列
    NSOperationQueue *queue = [[NSOperationQueue alloc] init];
    
    // 2. 创建操作
    // 创建NSInvocationOperation
    NSInvocationOperation *op1 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(run1) object:nil];
    // 创建NSBlockOperation
    NSBlockOperation *op2 = [NSBlockOperation blockOperationWithBlock:^{
        for (int i = 0; i &lt; 2; ++i) {
            NSLog(@"1-----%@", [NSThread currentThread]);
        }
    }];
    
    // 3. 添加操作到队列中：addOperation:
    [queue addOperation:op1]; // [op1 start]
    [queue addOperation:op2]; // [op2 start]
}
- (void)run1
{
    for (int i = 0; i &lt; 2; ++i) {
        NSLog(@"2-----%@", [NSThread currentThread]);
    }
}
#pragma mark -3.2 无需先创建任务，在block中添加任务，直接将任务block加入到队列中。- (void)addOperationWithBlock:(void (^)(void))block;
//可以看出addOperationWithBlock:和NSOperationQueue能够开启新线程，进行并发执行。
- (void)test_addOperationWithBlockToQueue
{
    // 1. 创建队列
    NSOperationQueue *queue = [[NSOperationQueue alloc] init];
    
    // 2. 添加操作到队列中：addOperationWithBlock:
    [queue addOperationWithBlock:^{
        for (int i = 0; i &lt; 2; ++i) {
            NSLog(@"-----%@", [NSThread currentThread]);
        }
    }];
}
#pragma mark -3.3 控制串行执行和并行执行的关键
/*这里有个关键参数maxConcurrentOperationCount，叫做最大并发数。
 最大并发数：maxConcurrentOperationCount
 maxConcurrentOperationCount默认情况下为-1，表示不进行限制，默认为并发执行。
 当maxConcurrentOperationCount为1时，进行串行执行。
 当maxConcurrentOperationCount大于1时，进行并发执行，当然这个值不应超过系统限制，即使自己设置一个很大的值，系统也会自动调整。。*/
//可以看出：当最大并发数为1时，任务是按顺序串行执行的。当最大并发数为2时，任务是并发执行的。而且开启线程数量是由系统决定的，不需要我们来管理。这样看来，是不是比GCD还要简单了许多？
- (void)test_opetationQueue
{
    // 创建队列
    NSOperationQueue *queue = [[NSOperationQueue alloc] init];
    
    // 设置最大并发操作数
    //    queue.maxConcurrentOperationCount = 2;
    queue.maxConcurrentOperationCount = 1; // 就变成了串行队列
    
    // 添加操作
    [queue addOperationWithBlock:^{
        NSLog(@"1-----%@", [NSThread currentThread]);
        [NSThread sleepForTimeInterval:0.01];
    }];
    [queue addOperationWithBlock:^{
        NSLog(@"2-----%@", [NSThread currentThread]);
        [NSThread sleepForTimeInterval:0.01];
    }];
    [queue addOperationWithBlock:^{
        NSLog(@"3-----%@", [NSThread currentThread]);
        [NSThread sleepForTimeInterval:0.01];
    }];
    [queue addOperationWithBlock:^{
        NSLog(@"4-----%@", [NSThread currentThread]);
        [NSThread sleepForTimeInterval:0.01];
    }];
}
#pragma mark -4.操作依赖
//NSOperation和NSOperationQueue最吸引人的地方是它能添加操作之间的依赖关系。比如说有A、B两个操作，其中A执行完操作，B才能执行操作，那么就需要让B依赖于A。具体如下：
- (void)test_addDependency
{
    NSOperationQueue *queue = [[NSOperationQueue alloc] init];
    
    NSBlockOperation *op1 = [NSBlockOperation blockOperationWithBlock:^{
        NSLog(@"1-----%@", [NSThread  currentThread]);
    }];
    NSBlockOperation *op2 = [NSBlockOperation blockOperationWithBlock:^{
        NSLog(@"2-----%@", [NSThread  currentThread]);
    }];
    
    [op2 addDependency:op1];    // 让op2 依赖于 op1，则先执行op1，在执行op2
    
    [queue addOperation:op1];
    [queue addOperation:op2];
}

#pragma mark -5. 一些其他方法
/*- (void)cancel; NSOperation提供的方法，可取消单个操作
 - (void)cancelAllOperations; NSOperationQueue提供的方法，可以取消队列的所有操作
 - (void)setSuspended:(BOOL)b; 可设置任务的暂停和恢复，YES代表暂停队列，NO代表恢复队列
 - (BOOL)isSuspended; 判断暂停状态
 
 注意：
 
 这里的暂停和取消并不代表可以将当前的操作立即取消，而是当当前的操作执行完毕之后不再执行新的操作。
 暂停和取消的区别就在于：暂停操作之后还可以恢复操作，继续向下执行；而取消操作之后，所有的操作就清空了，无法再接着执行剩下的操作。
 */</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>731702E8-7A2C-48B3-8EE3-ED8896EAF4D2</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetTitle</key>
	<string>NSOperation详解</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
